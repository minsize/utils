/**
 * Функция мемоизации, которая сохраняет результаты вызовов функции `fn` с определенными аргументами.
 * @template F - Параметр типа для функции, которая принимается на вход.
 * @param {F} fn - Функция, результат выполнения которой необходимо запоминать.
 * @returns {F} - Меморизованная версия переданной функции.
 */
function memoize<F extends (...args: any[]) => any>(fn: F): F {
  // Кэш, где ключом выступает строковая версия аргументов, а значением - результат функции
  const cache = new Map<string, ReturnType<F>>()

  // Возвращаемая меморизованная функция
  return function (...args: Parameters<F>): ReturnType<F> {
    // Преобразуем аргументы в строку, чтобы использовать как ключ в кэше
    const key = JSON.stringify(args)

    // Проверяем, если результат для этих аргументов уже вычислен и находится в кэше
    if (cache.has(key)) {
      // Возвращаем закэшированный результат
      return cache.get(key) as ReturnType<F>
    }

    // Вычисляем новый результат и сохраняем его в переменную
    const result = fn(...args)
    // Сохраняем новый результат в кэше
    cache.set(key, result)

    // Возвращаем вычисленный результат
    return result
  } as F // Приведение функции к типу `F` для соответствия сигнатуре
}

export default memoize
